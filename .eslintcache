[{"E:\\front-end-thesis\\src\\index.js":"1","E:\\front-end-thesis\\src\\reportWebVitals.js":"2","E:\\front-end-thesis\\src\\App.js":"3","E:\\front-end-thesis\\src\\components\\ItemList.js":"4","E:\\front-end-thesis\\src\\components\\Result\\index.js":"5","E:\\front-end-thesis\\src\\components\\SolidModal\\index.js":"6","E:\\front-end-thesis\\src\\components\\Item\\Item.js":"7","E:\\front-end-thesis\\src\\components\\FoldersTree.js":"8","E:\\front-end-thesis\\src\\utils\\utils.js":"9"},{"size":517,"mtime":1613352993092,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1613352993093,"results":"12","hashOfConfig":"11"},{"size":9752,"mtime":1613456915265,"results":"13","hashOfConfig":"11"},{"size":430,"mtime":1613352993090,"results":"14","hashOfConfig":"11"},{"size":2736,"mtime":1613352993091,"results":"15","hashOfConfig":"11"},{"size":3406,"mtime":1613352993092,"results":"16","hashOfConfig":"11"},{"size":4219,"mtime":1613352993090,"results":"17","hashOfConfig":"11"},{"size":1790,"mtime":1613352993089,"results":"18","hashOfConfig":"11"},{"size":910,"mtime":1613352993094,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nhmgma",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\front-end-thesis\\src\\index.js",[],["41","42"],"E:\\front-end-thesis\\src\\reportWebVitals.js",[],"E:\\front-end-thesis\\src\\App.js",[],"E:\\front-end-thesis\\src\\components\\ItemList.js",[],"E:\\front-end-thesis\\src\\components\\Result\\index.js",[],"E:\\front-end-thesis\\src\\components\\SolidModal\\index.js",["43"],"import FoldersTree from \"../FoldersTree\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Modal from \"react-modal\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { CircularProgress, Snackbar } from \"@material-ui/core\";\r\nimport { getFoldersForUrl } from \"../../utils/utils\";\r\nimport \"./index.css\";\r\nconst auth = require(\"solid-auth-client\");\r\nconst FC = require(\"solid-file-client\");\r\nconst fc = new FC(auth);\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n};\r\n\r\nexport function SolidModal(props) {\r\n  const [foldersTree, setFoldersTree] = useState();\r\n  const [url, setUrl] = useState();\r\n  const [open, setOpen] = useState();\r\n  const [isError, setError] = useState(false);\r\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const updateFoldersTreeForUrl = async (url) => {\r\n    const folder = await getFoldersForUrl(url);\r\n    setFoldersTree(folder);\r\n  };\r\n  useEffect(() => {\r\n    updateFoldersTreeForUrl(props.rootUrl);\r\n    console.log(props.type);\r\n    setMessage(\r\n      `You should choose a ${props.type === \"file\" ? \"file\" : \"folder!\"}`\r\n    );\r\n  }, []); // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        ariaHideApp={false}\r\n        style={customStyles}\r\n        isOpen={props.isModalOpen}\r\n        onRequestClose={() => props.modalClose()}\r\n      >\r\n        <div className=\"solid-modal\">\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"center\",\r\n            }}\r\n            open={snackBarOpen}\r\n            autoHideDuration={2000}\r\n            onClose={() => setSnackBarOpen(false)}\r\n          >\r\n            <Alert severity={isError && isError ? \"error\" : \"success\"}>\r\n              {message}\r\n            </Alert>\r\n          </Snackbar>\r\n          <div className=\"solid-modal-tree\">\r\n            <FoldersTree\r\n              foldersTreeItems={foldersTree}\r\n              onSelectNode={(event, url) => {\r\n                setUrl(url);\r\n              }}\r\n            />\r\n          </div>\r\n          <Button\r\n            className=\"solid-button-confirm\"\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            maxW\r\n            onClick={async () => {\r\n              if (!url) {\r\n                setError(true);\r\n                setSnackBarOpen(true);\r\n                return;\r\n              }\r\n\r\n              const res = await fc.head(url);\r\n              const type =\r\n                res.url.charAt(res.url.length - 1) === \"/\" ? \"folder\" : \"file\";\r\n\r\n              if (props.type !== type) {\r\n                setError(true);\r\n                setSnackBarOpen(true);\r\n                return;\r\n              }\r\n\r\n              setOpen(true);\r\n              props.modalConfirm(url);\r\n              updateFoldersTreeForUrl(props.rootUrl).then(() => {\r\n                setOpen(false);\r\n                setError(false);\r\n                setMessage(\"Success\");\r\n                setSnackBarOpen(true);\r\n              });\r\n            }}\r\n          >\r\n            {open ? <CircularProgress color=\"inherit\" /> : \"CONFIRM\"}\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","E:\\front-end-thesis\\src\\components\\Item\\Item.js",["44"],"import \"./Item.css\";\r\nimport React, { useState } from \"react\";\r\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\r\nimport Modal from \"react-modal\";\r\nimport { Input, InputLabel, InputAdornment } from \"@material-ui/core\";\r\nimport \"react-medium-image-zoom/dist/styles.css\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport { IconButton, CircularProgress } from \"@material-ui/core\";\r\nimport { RemoveCircle, BorderColor } from \"@material-ui/icons\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n};\r\nexport default function Item(props) {\r\n  const [url, setUrl] = useState(null);\r\n  const [isZoom, setZoom] = useState(false);\r\n  const [imageName, setImageName] = useState(\"\");\r\n  const [modalFileName, setModalFileName] = useState(\"\");\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n\r\n  var file = props.file;\r\n\r\n  var reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n  reader.onloadend = function (e) {\r\n    setUrl(reader.result);\r\n    setImageName(file.name);\r\n  };\r\n\r\n  const renameFile = (name) => {\r\n    Object.defineProperty(file, \"name\", {\r\n      writable: true,\r\n      value: name,\r\n    });\r\n    Object.defineProperty(file, \"originalname\", {\r\n      writable: true,\r\n      value: name,\r\n    });\r\n    console.log(file);\r\n    setImageName(name);\r\n    setModalFileName(name);\r\n    setIsOpenModal(false);\r\n  };\r\n\r\n  return url !== null ? (\r\n    <div className=\"u-item\">\r\n      <Modal\r\n        style={customStyles}\r\n        ariaHideApp={false}\r\n        isOpen={isOpenModal}\r\n        onRequestClose={() => {\r\n          setModalFileName(imageName);\r\n          setIsOpenModal(false);\r\n        }}\r\n      >\r\n        <InputLabel className=\"nav-e\" htmlFor=\"modalFileName\">\r\n          Name\r\n        </InputLabel>\r\n\r\n        <Input\r\n          id=\"modalFileName\"\r\n          className=\"nav-e\"\r\n          style={{ width: \"200px\" }}\r\n          value={modalFileName}\r\n          onChange={(d) => {\r\n            setModalFileName(d.target.value);\r\n          }}\r\n          aria-describedby=\"standard-weight-helper-text\"\r\n          inputProps={{\r\n            \"aria-label\": \"Name\",\r\n          }}\r\n        />\r\n        <Button\r\n          className=\"nav-name\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => renameFile(modalFileName)}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Modal>\r\n      <div className=\"u-edit\">\r\n        {props.editName === true ? (\r\n          <div className=\"u-edit-button\">\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n              onClick={() => {\r\n                setModalFileName(imageName);\r\n                setIsOpenModal(true);\r\n              }}\r\n            >\r\n              <BorderColor />\r\n            </IconButton>\r\n          </div>\r\n        ) : (\r\n          <div />\r\n        )}\r\n        {props.delete ? (\r\n          <div className=\"u-edit-button\">\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n              onClick={() => props.onDelete()}\r\n            >\r\n              <RemoveCircle />\r\n            </IconButton>\r\n          </div>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n      {/* ) : (\r\n        <div></div>\r\n      )} */}\r\n      {/* <div className=\"u-edit\">\r\n        \r\n      </div> */}\r\n      <div>\r\n        <ControlledZoom\r\n          isZoomed={isZoom}\r\n          onZoomChange={(zoom) => setZoom(zoom)}\r\n        >\r\n          {/* ${isZoom ? 'u-img-zoom' : '' */}\r\n          <div className=\"u-zoom\">\r\n            <img className=\"u-img\" alt=\"\" src={url}></img>\r\n            <div className=\"u-title\">Name: {imageName}</div>\r\n            {file.detection ? (\r\n              <div className=\"u-title\">{file.detection}</div>\r\n            ) : (\r\n              <div />\r\n            )}\r\n          </div>\r\n        </ControlledZoom>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className=\"progress\">\r\n      <CircularProgress size=\"100px\" color=\"secondary\" />\r\n    </div>\r\n  );\r\n}\r\n","E:\\front-end-thesis\\src\\components\\FoldersTree.js",[],"E:\\front-end-thesis\\src\\utils\\utils.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":42,"column":6,"nodeType":"51","endLine":42,"endColumn":8,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":5,"column":29,"nodeType":"55","messageId":"56","endLine":5,"endColumn":43},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.rootUrl' and 'props.type'. Either include them or remove the dependency array. If 'setMessage' needs the current value of 'props.type', you can also switch to useReducer instead of useState and read 'props.type' in the reducer.","ArrayExpression",["59"],"no-unused-vars","'InputAdornment' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [props.rootUrl, props.type]",{"range":"62","text":"63"},[1330,1332],"[props.rootUrl, props.type]"]